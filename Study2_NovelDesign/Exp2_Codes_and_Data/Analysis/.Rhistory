labels = c("","c."),
common.legend = TRUE, nrow = 2, legend = "right")
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_all.pdf"), width = 8, height = 5)
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_all.pdf"), width = 8, height = 5)
# RT plot (time locked to trial onset) ----
RT_plot = ggplot(data = subset(training_data2), aes(x=RT, color = runNum2)) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_density(size = 0.3) +
geom_vline(xintercept = 1000, linetype = 2, size = 0.5) +
geom_vline(xintercept = 0, linetype = 2, size = 0.5) +
annotate(geom = "text", x = 200, y = .0065,label = "Stimulus Onset", size = 2) +
annotate(geom = "text", x = 1200, y = .0065,label = "Stimulus Offset", size = 2) +
labs(color = "Training\nRun", x = "RT (from trial onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
# RT plot (time locked to Cue) ----
RT_effective_plot = ggplot(data = subset(training_data2), aes(x=RT_eff, color = runNum2)) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_density(size = 0.3) +
geom_vline(xintercept = 0, linetype = 2, size = 0.5) +
annotate(geom = "text", x = 200, y = .0065,label = "Cue Onset", size = 2) +
labs(color = "Training\nRun", x = "RT effective (from Cue onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
# RT plot (time locked to Cue) - split to late and early runs
n_run_groups = 4
run_groups_width = 20/n_run_groups
RT_effective_grouped_plot = training_data2 %>%
# filter(runNum>=18 | runNum<=3) %>%
#mutate(late_run = factor(runNum>=17,labels = c('Early runs','Late runs'))) %>%
mutate(run_Q = cut(runNum, breaks=n_run_groups, include.lowest = TRUE, labels = FALSE),
late_run = paste0("Q",run_Q, " (Runs ",(run_Q-1)*run_groups_width+1," - ",(run_Q)*run_groups_width,")")) %>%
ggplot(aes(x=RT_eff, color = runNum2)) +
geom_density(size = 0.3) +
facet_grid(. ~ late_run) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_vline(xintercept = 0, linetype = 2, size = 0.5) +
annotate(geom = "text", x = 250, y = .0065,label = "Cue Onset", size = 2) +
labs(color = "Training\nRun", x = "RT effective (from Cue onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_locked_to_cue_onset_run_groups.pdf"), width = 8, height = 3)
# Plot 3 panels into one figure
ggarrange(ggarrange(RT_plot, RT_effective_plot,
ncol = 2,
common.legend = TRUE,
font.label = list(size = 10),
labels = c("a.", "b."),
legend = "none"),
RT_effective_grouped_plot,
font.label = list(size = 10),
labels = c("","c."),
common.legend = TRUE, nrow = 2, legend = "right")
# Plot 3 panels into one figure
ggarrange(ggarrange(RT_plot, RT_effective_plot,
ncol = 2,
common.legend = TRUE,
font.label = list(size = 10),
labels = c("a.", "b."),
legend = "none"),
RT_effective_grouped_plot,
font.label = list(size = 10),
labels = c("","c."),
common.legend = TRUE, nrow = 2, legend = "right")
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_all.pdf"), width = 8, height = 5)
RT_effective_grouped_plot = training_data2 %>%
# filter(runNum>=18 | runNum<=3) %>%
#mutate(late_run = factor(runNum>=17,labels = c('Early runs','Late runs'))) %>%
mutate(run_Q = cut(runNum, breaks=n_run_groups, include.lowest = TRUE, labels = FALSE),
late_run = paste0("Q",run_Q, " (Runs ",(run_Q-1)*run_groups_width+1," - ",(run_Q)*run_groups_width,")")) %>%
ggplot(aes(x=RT_eff, color = runNum2)) +
geom_density(size = 0.3) +
facet_grid(. ~ late_run) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_vline(xintercept = 0, linetype = 2, size = 0.2) +
annotate(geom = "text", x = 250, y = .0065,label = "Cue Onset", size = 2) +
labs(color = "Training\nRun", x = "RT effective (from Cue onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
RT_effective_grouped_plot
RT_effective_grouped_plot = training_data2 %>%
# filter(runNum>=18 | runNum<=3) %>%
#mutate(late_run = factor(runNum>=17,labels = c('Early runs','Late runs'))) %>%
mutate(run_Q = cut(runNum, breaks=n_run_groups, include.lowest = TRUE, labels = FALSE),
late_run = paste0("Q",run_Q, " (Runs ",(run_Q-1)*run_groups_width+1," - ",(run_Q)*run_groups_width,")")) %>%
ggplot(aes(x=RT_eff, color = runNum2)) +
geom_density(size = 0.3) +
facet_grid(. ~ late_run) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_vline(xintercept = 0, linetype = 2, size = 0.3) +
annotate(geom = "text", x = 250, y = .0065,label = "Cue Onset", size = 2) +
labs(color = "Training\nRun", x = "RT effective (from Cue onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
# RT plot (time locked to Cue) ----
RT_effective_plot = ggplot(data = subset(training_data2), aes(x=RT_eff, color = runNum2)) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_density(size = 0.3) +
geom_vline(xintercept = 0, linetype = 2, size = 0.3) +
annotate(geom = "text", x = 200, y = .0065,label = "Cue Onset", size = 2) +
labs(color = "Training\nRun", x = "RT effective (from Cue onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
# RT plot (time locked to trial onset) ----
RT_plot = ggplot(data = subset(training_data2), aes(x=RT, color = runNum2)) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_density(size = 0.3) +
geom_vline(xintercept = 1000, linetype = 2, size = 0.3) +
geom_vline(xintercept = 0, linetype = 2, size = 0.3) +
annotate(geom = "text", x = 200, y = .0065,label = "Stimulus Onset", size = 2) +
annotate(geom = "text", x = 1200, y = .0065,label = "Stimulus Offset", size = 2) +
labs(color = "Training\nRun", x = "RT (from trial onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
# RT plot (time locked to Cue) ----
RT_effective_plot = ggplot(data = subset(training_data2), aes(x=RT_eff, color = runNum2)) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_density(size = 0.3) +
geom_vline(xintercept = 0, linetype = 2, size = 0.3) +
annotate(geom = "text", x = 200, y = .0065,label = "Cue Onset", size = 2) +
labs(color = "Training\nRun", x = "RT effective (from Cue onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
RT_effective_grouped_plot = training_data2 %>%
# filter(runNum>=18 | runNum<=3) %>%
#mutate(late_run = factor(runNum>=17,labels = c('Early runs','Late runs'))) %>%
mutate(run_Q = cut(runNum, breaks=n_run_groups, include.lowest = TRUE, labels = FALSE),
late_run = paste0("Q",run_Q, " (Runs ",(run_Q-1)*run_groups_width+1," - ",(run_Q)*run_groups_width,")")) %>%
ggplot(aes(x=RT_eff, color = runNum2)) +
geom_density(size = 0.3) +
facet_grid(. ~ late_run) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_vline(xintercept = 0, linetype = 2, size = 0.3) +
annotate(geom = "text", x = 250, y = .0065,label = "Cue Onset", size = 2) +
labs(color = "Training\nRun", x = "RT effective (from Cue onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
# Plot 3 panels into one figure
ggarrange(ggarrange(RT_plot, RT_effective_plot,
ncol = 2,
common.legend = TRUE,
font.label = list(size = 10),
labels = c("a.", "b."),
legend = "none"),
RT_effective_grouped_plot,
font.label = list(size = 10),
labels = c("","c."),
common.legend = TRUE, nrow = 2, legend = "right")
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_all.pdf"), width = 8, height = 5)
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_all.pdf"), width = 8, height = 5)
# RT plot (time locked to trial onset) ----
RT_plot = ggplot(data = subset(training_data2), aes(x=RT, color = runNum2)) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_density(size = 0.3) +
geom_vline(xintercept = 1000, linetype = 2, size = 0.3) +
geom_vline(xintercept = 0, linetype = 2, size = 0.3) +
annotate(geom = "text", x = 200, y = .0075,label = "Stimulus Onset", size = 2) +
annotate(geom = "text", x = 1200, y = .0075,label = "Stimulus Offset", size = 2) +
labs(color = "Training\nRun", x = "RT (from trial onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
# RT plot (time locked to trial onset) ----
RT_plot = ggplot(data = subset(training_data2), aes(x=RT, color = runNum2)) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_density(size = 0.3) +
geom_vline(xintercept = 1000, linetype = 2, size = 0.3) +
geom_vline(xintercept = 0, linetype = 2, size = 0.3) +
annotate(geom = "text", x = 180, y = .0075,label = "Stimulus Onset", size = 2) +
annotate(geom = "text", x = 1180, y = .0075,label = "Stimulus Offset", size = 2) +
labs(color = "Training\nRun", x = "RT (from trial onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
# RT plot (time locked to Cue) ----
RT_effective_plot = ggplot(data = subset(training_data2), aes(x=RT_eff, color = runNum2)) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_density(size = 0.3) +
geom_vline(xintercept = 0, linetype = 2, size = 0.3) +
annotate(geom = "text", x = 180, y = .0065,label = "Cue Onset", size = 2) +
labs(color = "Training\nRun", x = "RT effective (from Cue onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
# Plot 3 panels into one figure
ggarrange(ggarrange(RT_plot, RT_effective_plot,
ncol = 2,
common.legend = TRUE,
font.label = list(size = 10),
labels = c("a.", "b."),
legend = "none"),
RT_effective_grouped_plot,
font.label = list(size = 10),
labels = c("","c."),
common.legend = TRUE, nrow = 2, legend = "right")
# Plot 3 panels into one figure
ggarrange(ggarrange(RT_plot, RT_effective_plot,
ncol = 2,
common.legend = TRUE,
font.label = list(size = 10),
labels = c("a.", "b."),
legend = "none"),
RT_effective_grouped_plot,
font.label = list(size = 10),
labels = c("","c."),
common.legend = TRUE, nrow = 2, legend = "right")
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_all.pdf"), width = 8, height = 5)
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_all.pdf"), width = 7, height = 4)
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_all.pdf"), width = 7, height = 4)
RT_effective_grouped_plot = training_data2 %>%
# filter(runNum>=18 | runNum<=3) %>%
#mutate(late_run = factor(runNum>=17,labels = c('Early runs','Late runs'))) %>%
mutate(run_Q = cut(runNum, breaks=n_run_groups, include.lowest = TRUE, labels = FALSE),
late_run = paste0("Q",run_Q, " (Runs ",(run_Q-1)*run_groups_width+1," - ",(run_Q)*run_groups_width,")")) %>%
ggplot(aes(x=RT_eff, color = runNum2)) +
geom_density(size = 0.3) +
facet_grid(. ~ late_run) +
theme_bw() +
scale_y_continuous(expand = expansion(mult=c(0,0.1))) + # trim space from x-axis
geom_vline(xintercept = 0, linetype = 2, size = 0.3) +
annotate(geom = "text", x = 300, y = .0065,label = "Cue Onset", size = 2) +
labs(color = "Training\nRun", x = "RT effective (from Cue onset)") +
ggtitle("") +
theme(text = element_text(size=8), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
# Plot 3 panels into one figure
ggarrange(ggarrange(RT_plot, RT_effective_plot,
ncol = 2,
common.legend = TRUE,
font.label = list(size = 10),
labels = c("a.", "b."),
legend = "none"),
RT_effective_grouped_plot,
font.label = list(size = 10),
labels = c("","c."),
common.legend = TRUE, nrow = 2, legend = "right")
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_all.pdf"), width = 7, height = 4)
dev.copy2pdf(file=paste0(figures_path,"MetaAnalysis_RT_density_all.pdf"), width = 7, height = 4)
library(lme4)
library(rstudioapi)
library(rstan)
library(lmerTest)
library(dplyr)
library(tidyr)
library(kableExtra)
library(ggpubr)
library(bayesplot)
theme_set(theme_pubr())
rm(list=ls())
# Get current path
pwd = dirname(rstudioapi::getActiveDocumentContext()$path)
models_path = paste0(pwd,'/StanModels/')
figures_path = paste0(pwd,'/Figures/')
setwd(pwd)
# Assisting functions ----
# Expit function (log-odds to p)
expit = function(x){exp(x)/(1+exp(x))}
# p-value to asterisk
p2asterisk = function(p){ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<.05, "*", "")))}
# Confidence interval from logistic regression model / model summary function.
CI = function (in_model, var_num = '',one_sided = F) {
# in_model = input model; [var_num] = variable in model to analyze (optional)
# if the input is a model (not model summary), convert to summary
if (class(in_model) == "glmerMod"){in_model = summary(in_model)}
coef = as.data.frame(in_model$coefficients)
coef$p = coef$`Pr(>|z|)`
ci_output = c()
ci_logs = as.data.frame(cbind(coef[,1],
coef[,1]+qnorm(0.025)*coef[,2],
coef[,1]+qnorm(0.975)*coef[,2]))
ci_OR = exp(ci_logs)
ci_prop = expit(ci_logs)
colnames(ci_logs) = c("logOR","logOR_CI_lower","logOR_CI_upper")
colnames(ci_OR) = c("OR","OR_CI_lower","OR_CI_upper")
colnames(ci_prop) = c("prop","prop_CI_lower","prop_CI_upper")
ci_output = cbind(coef,ci_OR,ci_logs,ci_prop)
if (is.numeric(var_num)) {ci_output = ci_output[var_num,]}
if (one_sided==TRUE){
ci_output$p = ci_output$p/2
ci_output$`Pr(>|z|)` = ci_output$`Pr(>|z|)`/2
}
ci_output$asterisk = p2asterisk(ci_output$p)
return (ci_output)
}
# Load data ----
load("./Merged_Data.Rda")
CAT_data$Contingency2 = factor(CAT_data$Contingency, labels =  c("0% Contingency", "50% Contingency","100% Contingency"))
CAT_data$Run2 = as.factor(CAT_data$Run)
CAT_data$Response = 1 - is.na(CAT_data$RT)
CAT_data$RT_eff = CAT_data$RT - CAT_data$CueOnset
# Data frame of Go trials with response
CAT_data_GO = subset(CAT_data, Go==1 & Response == 1 & RT>=250)
Probe_data$PairType2 = as.factor(Probe_data$PairType)
Probe_data$Contingency2 = factor(Probe_data$Contingency, labels = c("50%", "100%"))
params_exp1
library(lme4)
library(rstudioapi)
library(rstan)
library(lmerTest)
library(dplyr)
library(tidyr)
library(kableExtra)
library(ggpubr)
library(bayesplot)
theme_set(theme_pubr())
rm(list=ls())
# Get current path
pwd = dirname(rstudioapi::getActiveDocumentContext()$path)
models_path = paste0(pwd,'/StanModels/')
figures_path = paste0(pwd,'/Figures/')
setwd(pwd)
# Assisting functions ----
# Expit function (log-odds to p)
expit = function(x){exp(x)/(1+exp(x))}
# p-value to asterisk
p2asterisk = function(p){ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<.05, "*", "")))}
# Confidence interval from logistic regression model / model summary function.
CI = function (in_model, var_num = '',one_sided = F) {
# in_model = input model; [var_num] = variable in model to analyze (optional)
# if the input is a model (not model summary), convert to summary
if (class(in_model) == "glmerMod"){in_model = summary(in_model)}
coef = as.data.frame(in_model$coefficients)
coef$p = coef$`Pr(>|z|)`
ci_output = c()
ci_logs = as.data.frame(cbind(coef[,1],
coef[,1]+qnorm(0.025)*coef[,2],
coef[,1]+qnorm(0.975)*coef[,2]))
ci_OR = exp(ci_logs)
ci_prop = expit(ci_logs)
colnames(ci_logs) = c("logOR","logOR_CI_lower","logOR_CI_upper")
colnames(ci_OR) = c("OR","OR_CI_lower","OR_CI_upper")
colnames(ci_prop) = c("prop","prop_CI_lower","prop_CI_upper")
ci_output = cbind(coef,ci_OR,ci_logs,ci_prop)
if (is.numeric(var_num)) {ci_output = ci_output[var_num,]}
if (one_sided==TRUE){
ci_output$p = ci_output$p/2
ci_output$`Pr(>|z|)` = ci_output$`Pr(>|z|)`/2
}
ci_output$asterisk = p2asterisk(ci_output$p)
return (ci_output)
}
# Load data ----
load("./Merged_Data.Rda")
CAT_data$Contingency2 = factor(CAT_data$Contingency, labels =  c("0% Contingency", "50% Contingency","100% Contingency"))
CAT_data$Run2 = as.factor(CAT_data$Run)
CAT_data$Response = 1 - is.na(CAT_data$RT)
CAT_data$RT_eff = CAT_data$RT - CAT_data$CueOnset
# Data frame of Go trials with response
CAT_data_GO = subset(CAT_data, Go==1 & Response == 1 & RT>=250)
Probe_data$PairType2 = as.factor(Probe_data$PairType)
Probe_data$Contingency2 = factor(Probe_data$Contingency, labels = c("50%", "100%"))
# RT distribution plot ----
CAT_data_GO %>% ggplot() +
facet_grid(experiment ~ Contingency2 ) +
geom_density(aes(x = RT_eff, y = ..density.., color = Run2),size = 0.3) +
labs(color = "Training\nRun", x = "RT effective (from cue onset)") +
theme_bw() +
annotate(geom="text", x=-850+600, y=.0047, label="Cue onset\n(850ms)", size = 2.5) +
annotate(geom = "text", x = -850+250, y = .0077,label = "Stim. onset",size = 2.5) +
annotate(geom = "text", x = -850+1250, y = .0077,label = "Stim. offset\n(1000ms)", size = 2.5) +
geom_vline(xintercept = -850+ 0, linetype =2) +
geom_vline(xintercept = -850+850, linetype =2) +
geom_vline(xintercept = -850+1000, linetype =2) +
scale_y_continuous(limits =c(0,.0085), expand = c(0,0)) +
scale_x_continuous(limits =c(-850+(-50),-850+1500), expand = c(0,0),
breaks=seq(-800, 600, 200)) +
#theme(legend.key.size=unit(.4,"cm"),panel.spacing = unit(2, "lines"))
theme(text = element_text(size=10), legend.text =  element_text(size=8),legend.key.size = unit(0.1,"inch"))
dev.copy2pdf(file=paste0(figures_path,"Study2_RT_density_locked_to_trial_onset.pdf"), width = 6, height = 4)
# Stan model - both contingency levels ----
# Load models
load(file = paste0(models_path,"fit_stan2_exp1.Rda"))
fit_stan_exp1 = fit_stan2
stan_data_exp1 = stan_data
load(file = paste0(models_path,"fit_stan2_exp2.Rda"))
fit_stan_exp2 = fit_stan2
stan_data_exp2 = stan_data
model_summary_exp1 = summary(fit_stan_exp1)$summary %>% as.data.frame() %>% mutate(Exp = 1)
model_summary_exp2 = summary(fit_stan_exp2)$summary %>% as.data.frame() %>% mutate(Exp = 2)
stan_data_both = list(stan_data_exp1, stan_data_exp2)
model_summary_both = list(model_summary_exp1,model_summary_exp2)
# Stan model - Individual stimuli: Load models
load(file = paste0(models_path,"/fit_stan3_exp1.Rda")) # 100% contingency
fit_stan_exp1_stim100 = fit_stan3
load(file = paste0(models_path,"/fit_stan4_exp1.Rda")) # 50% contingency
fit_stan_exp1_stim50 = fit_stan4
load(file = paste0(models_path,"/fit_stan3_exp2.Rda")) # 100% contingency
fit_stan_exp2_stim100 = fit_stan3
load(file = paste0(models_path,"/fit_stan4_exp2.Rda")) # 50% contingency
fit_stan_exp2_stim50 = fit_stan4
model_summary_exp1_50 = summary(fit_stan_exp1_stim50)$summary %>% as.data.frame() %>% mutate(Exp = 1)
model_summary_exp2_50 = summary(fit_stan_exp2_stim50)$summary %>% as.data.frame() %>% mutate(Exp = 2)
model_summary_exp1_100 = summary(fit_stan_exp1_stim100)$summary %>% as.data.frame() %>% mutate(Exp = 1)
model_summary_exp2_100 = summary(fit_stan_exp2_stim100)$summary %>% as.data.frame() %>% mutate(Exp = 2)
model_summary_individual_both_100 = list(model_summary_exp1_100,model_summary_exp2_100)
model_summary_individual_both_50 = list(model_summary_exp1_50,model_summary_exp2_50)
### Stan model - summary ----
vars2pars = pars = c("mu1_fix","mu2_fix", "sigma_e[1]", "sigma_e[2]", "mu1_sd[1]",
"theta_fix[1]", "theta_fix[2]", "theta_sd[1]", "theta_sd[2]")
model_summary = rbind(model_summary_exp1[vars2pars,c("Exp", "mean", "2.5%","97.5%")],
model_summary_exp2[vars2pars,c("Exp", "mean", "2.5%","97.5%")])
model_summary %>% kbl(digits=2) %>% kable_minimal()
fit_stan_both = list(fit_stan_exp1, fit_stan_exp2)
### Stan model - Trace plot ----
vars2pars_name = c("mu[1]", "mu[2]","sigma[epsilon[1]]", "sigma[epsilon[2]]",
"sigma[mu[1]]", "theta[slope[100*'%\']]", "theta[slope[50*'%\']]",
"sigma[theta[slope100*'%\']]","sigma[theta[slope50*'%\']]")
traceplot_both = list()
# Stan model - both contingency levels: correlation with choice ----
theta_probe_plot_both = list()
theta_probe_plot_same_axis_both = list()
theta_probe_model_both = list()
theta_probe_model_long_both = list()
params_CI_both = list()
exp_i=1
model_summary = model_summary_both[[exp_i]] # stan model data
theta_100 = model_summary$mean[grep("theta_b1_rand",row.names(model_summary))]
theta_50 = model_summary$mean[grep("theta_b2_rand",row.names(model_summary))]
thetas = data.frame(theta = c(theta_50,theta_100),
Contingency = rep(c(0.5,1),each = length(theta_50)),
sub_i = rep(1:length(theta_50),2)) %>%
mutate(contingency_sub_i = paste0(Contingency*100,",",sub_i)) %>%
select(contingency_sub_i, theta)
DM_dat_long = Probe_data %>% filter(experiment_num == exp_i) %>%
mutate(sub_i = as.numeric(as.factor(subjectID)),
Contingency2 = factor(Contingency, labels = c("50% Contingency","100% Contingency")),
contingency_sub_i = paste0(Contingency*100,",",sub_i),
stim_go = ifelse(IsleftGo,as.character(ImageLeft),as.character(ImageRight))) %>%
left_join(thetas, by = "contingency_sub_i") %>%
group_by(sub_i) %>%
mutate(stim_go_i = as.numeric(as.factor(stim_go))) %>%
group_by(.)
DM_dat_med = DM_dat_long%>% # to fit the size of random slope per item
group_by(Contingency, Contingency2, stim_go_i, sub_i, subjectID) %>%
summarise(probe_effect = mean(Outcome, na.rm=T),
chose_go = sum(Outcome==1, na.rm=T),
chose_nogo = sum(Outcome==0, na.rm=T),
theta = mean(theta)) %>%
group_by(.)
DM_dat = DM_dat_long %>%
group_by(Contingency, Contingency2, subjectID) %>%
summarise(probe_effect = mean(Outcome, na.rm=T),
chose_go = sum(Outcome==1, na.rm=T),
chose_nogo = sum(Outcome==0, na.rm=T)) %>%
group_by(.) %>%
mutate(theta = c(theta_50,theta_100),
theta_scaled = c(scale(theta_50),scale(theta_100)))
# GLMER model (same as modeling each condition separately)
glmer_model = glmer(cbind(chose_go,chose_nogo) ~ 1 + theta*Contingency2 +
(1 + Contingency2|subjectID), data = DM_dat, family = "binomial")
glmer_model_no_contingency = glmer(cbind(chose_go,chose_nogo) ~ 1 + theta +
(1 + Contingency2|subjectID), data = DM_dat, family = "binomial")
glmer_model
ranef(glmer_model)
ranef(glmer_model)[,2]
ranef(glmer_model)[:,2]
x = ranef(glmer_model)
x[,2]
x
x$subjectID[,2]
hist(x$subjectID[,2])
hist(x$subjectID[,1])
exp_i=2
model_summary = model_summary_both[[exp_i]] # stan model data
theta_100 = model_summary$mean[grep("theta_b1_rand",row.names(model_summary))]
theta_50 = model_summary$mean[grep("theta_b2_rand",row.names(model_summary))]
thetas = data.frame(theta = c(theta_50,theta_100),
Contingency = rep(c(0.5,1),each = length(theta_50)),
sub_i = rep(1:length(theta_50),2)) %>%
mutate(contingency_sub_i = paste0(Contingency*100,",",sub_i)) %>%
select(contingency_sub_i, theta)
DM_dat_long = Probe_data %>% filter(experiment_num == exp_i) %>%
mutate(sub_i = as.numeric(as.factor(subjectID)),
Contingency2 = factor(Contingency, labels = c("50% Contingency","100% Contingency")),
contingency_sub_i = paste0(Contingency*100,",",sub_i),
stim_go = ifelse(IsleftGo,as.character(ImageLeft),as.character(ImageRight))) %>%
left_join(thetas, by = "contingency_sub_i") %>%
group_by(sub_i) %>%
mutate(stim_go_i = as.numeric(as.factor(stim_go))) %>%
group_by(.)
DM_dat_med = DM_dat_long%>% # to fit the size of random slope per item
group_by(Contingency, Contingency2, stim_go_i, sub_i, subjectID) %>%
summarise(probe_effect = mean(Outcome, na.rm=T),
chose_go = sum(Outcome==1, na.rm=T),
chose_nogo = sum(Outcome==0, na.rm=T),
theta = mean(theta)) %>%
group_by(.)
DM_dat = DM_dat_long %>%
group_by(Contingency, Contingency2, subjectID) %>%
summarise(probe_effect = mean(Outcome, na.rm=T),
chose_go = sum(Outcome==1, na.rm=T),
chose_nogo = sum(Outcome==0, na.rm=T)) %>%
group_by(.) %>%
mutate(theta = c(theta_50,theta_100),
theta_scaled = c(scale(theta_50),scale(theta_100)))
# GLMER model (same as modeling each condition separately)
glmer_model = glmer(cbind(chose_go,chose_nogo) ~ 1 + theta*Contingency2 +
(1 + Contingency2|subjectID), data = DM_dat, family = "binomial")
glmer_model
ranef(glmer_model)$subjectID[,1]
ranef(glmer_model)$subjectID[,1] %>% hist()
ranef(glmer_model)$subjectID[,2] %>% hist()
ranef(glmer_model)$subjectID[,2] %>% mean()
ranef(glmer_model)$subjectID[,1] %>% mean()
